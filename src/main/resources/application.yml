file:
  uploadDir: gerenciador/src/main/resources/uploads

documento:
  url: http://localhost:8081

api:
  security:
    token:
      secret: ${JWT_SECRET:my-secret-key}

spring:
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: Brazil/East
  jpa:
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          lob:
            non_contextual_creation: true
    show-sql: false
    generate-ddl: true
    flyway:
      enable: true
  servlet:
    multipart:
      max-file-size: 20MB
      max-request-size: 20MB
  redis:
    host: ${HOST}
    port: ${PORT}
  cache:
    type: redis
    cache-names: buscar_cliente, buscar_cliente_id, buscar_clientes_por_nome

server:
  port: 8080

---
spring:
  config:
    activate:
      on-profile: test

# Configurações para o banco de dados de teste (você pode personalizar conforme necessário)
datasource:
  url: jdbc:h2:mem:testdb
  driver-class-name: org.h2.Driver
  username: sa
  password: password
  hikari:
    maximum-pool-size: 5
---
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    url: jdbc:postgresql://localhost:5433/gestao
    username: postgres
    password: 1234567
  flyway:
    locations: classpath:db/migration
  jpa:
    hibernate:
      ddl-auto: update

---
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    url: ${POSTGRES}
    username: ${USERNAME}
    password: ${PASSWORD}
  flyway:
    locations: classpath:db/migration
  jpa:
    hibernate:
      ddl-auto: update

logging:
  level:
    root: INFO
    com.example.mypackage: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: '*'